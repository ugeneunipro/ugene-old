#@UGENE_WORKFLOW
#Find pattern in supplied sequence using Smith-Waterman algorithm



workflow find-sw{

    read-sequence {
        type:read-sequence;
        name:"Read Reference Sequence";
        url-in {
            dataset:Dataset;
        }
    }
    read-sequence-1 {
        type:read-sequence;
        name:"Read Pattern Sequence";
        url-in {
            dataset:Dataset;
        }
    }
    write-sequence {
        type:write-sequence;
        name:"Write Genbank";
        document-format:genbank;
    }
    ssearch {
        type:ssearch;
        name:"Smith-Waterman Search";
        algorithm:"Classic 2";
    }


    .actor-bindings {
        ssearch.out-annotations->write-sequence.in-sequence
        read-sequence.out-sequence->ssearch.in-sequence
        read-sequence-1.out-sequence->ssearch.pattern
    }

    read-sequence-1.annotations->write-sequence.in-sequence.annotations
    read-sequence.annotations->write-sequence.in-sequence.annotations
    ssearch.annotations->write-sequence.in-sequence.annotations
    read-sequence.sequence->write-sequence.in-sequence.sequence
    read-sequence.sequence->ssearch.in-sequence.sequence
    read-sequence-1.sequence->ssearch.pattern.sequence

    .meta {
        parameter-aliases {
            read-sequence.url-in {
                alias:ref;
                description:"Input reference sequence";
            }
            read-sequence-1.url-in {
                alias:ptrn;
                description:"A subsequence pattern to look for";
            }
            write-sequence.accumulate {
                alias:accumulate;
                description:"Accumulate all incoming data in one file or create separate files for each input. In the latter case, an incremental numerical suffix is added to the file name (using 'True' by default)";
            }
            write-sequence.url-out {
                alias:out;
                description:"Output file with annotations";
            }
            ssearch.algorithm {
                alias:algo;
                description:"Version of the Smith-Waterman algorithm. You can use the optimized versions of the algorithm(SSE2, CUDA and OpenCL) if your hardware supports these capabilities (using 'Classic 2' by default)";
            }
            ssearch.amino {
                alias:amino;
                description:"Translates a supplied nucleotide sequence to protein and searches in the translated sequence (using 'False' by default)";
            }
            ssearch.filter-strategy {
                alias:filter;
                description:"Result filtering strategy (using 'filter-intersections' by default)";
            }
            ssearch.gap-ext-score {
                alias:gap-ext-penalty;
                description:"Penalty for extending a gap (using '-1.0' by default)";
            }
            ssearch.gap-open-score {
                alias:gap-open-penalty;
                description:"Penalty for opening a gap (using '-10.0' by default)";
            }
            ssearch.matrix {
                alias:matrix;
                description:"Scoring matrix (using 'Auto' by default)";
            }
            ssearch.min-score {
                alias:score;
                description:"Minimal percent similarity between a sequence and a pattern (using '90' percents by default)";
            }
            ssearch.result-name {
                alias:name;
                description:"Name of the result annotations marking found regions (using 'misc_feature' by default)";
            }
            ssearch.use-pattern-names {
                alias:use-pattern-names;
                description:"Use a pattern name as an annotation name (using 'True' by default)";
            }
        }
        visual {
            read-sequence {
                pos:"-777 -517";
                style:ext;
                bg-color-ext:"0 128 128 64";
                out-sequence.angle:358.047;
            }
            read-sequence-1 {
                pos:"-778 -370";
                style:ext;
                bg-color-ext:"0 128 128 64";
                out-sequence.angle:360;
            }
            ssearch {
                pos:"-572 -520";
                style:ext;
                bg-color-ext:"0 128 128 64";
                in-sequence.angle:189.782;
                out-annotations.angle:329.243;
                pattern.angle:258.69;
            }
            write-sequence {
                pos:"-262 -430";
                style:ext;
                bg-color-ext:"0 128 128 64";
                in-sequence.angle:180;
            }
            read-sequence-1.out-sequence->ssearch.pattern {
                text-pos:"-29.8281 -28";
            }
            read-sequence.out-sequence->ssearch.in-sequence {
                text-pos:"-33.8281 -28";
            }
            ssearch.out-annotations->write-sequence.in-sequence {
                text-pos:"-42 -42";
            }
        }
    }
}

