// -*- Mode: C++; tab-width: 2; -*-
// vi: set ts=2:
//
// $Id: string.iC,v 1.44 2003-08-26 08:04:12 oliver Exp $
//

BALL_INLINE 
String::String()
	throw()
	: string()
{
}

BALL_INLINE 
String::String(const String& s)
	throw()
	: string(s.c_str())
{
}

BALL_INLINE 
String::String(const unsigned char c)
	throw()
	: string(1, (char)c)
{
}

BALL_INLINE 
String::String(const char c, Size len)
	throw()
	: string(len, c)
{
}

BALL_INLINE 
String::String(const string& s)
	throw()
	: string(s)
{
}

BALL_INLINE 
String::String(const String& s, Index from, Size len)
	throw(Exception::IndexUnderflow, Exception::IndexOverflow)
	: string("")
{
	s.validateRange_(from, len);
	if (len > 0)
	{
		assign(s.c_str() + from, len);
	}
}

BALL_INLINE 
#ifdef BALL_HAS_SSTREAM
void String::set(std::stringstream& s)
#else
void String::set(std::strstream& s)
#endif
	throw()
{
	s >> (*this);
}

BALL_INLINE 
void String::set(char c, Size len)
	throw()
{
	assign(len, c);
}

BALL_INLINE 
void String::set(unsigned char c)
	throw()
{
	assign(1, (char)c);
}

BALL_INLINE 
bool String::operator == (const char* char_ptr) const
	throw(Exception::NullPointer)
{
  return (compare(char_ptr) == 0);
}

BALL_INLINE 
bool String::operator != (const char* char_ptr) const
	throw(Exception::NullPointer)
{
  return (compare(char_ptr) != 0);
}

BALL_INLINE 
bool Substring::operator == (const String& s) const
	throw(Substring::UnboundSubstring)
{
	if (bound_ == 0)
	{
		throw UnboundSubstring(__FILE__, __LINE__);
	}

  return (s.compare(bound_->c_str() + from_, 0, to_ - from_ + 1) == 0);
}

BALL_INLINE 
bool Substring::operator != (const String& s) const
	throw(Substring::UnboundSubstring)
{
  if (bound_ == 0)
  {
    throw UnboundSubstring(__FILE__, __LINE__);
	}

  return (s.compare(bound_->c_str() + from_, 0, to_ - from_ + 1) != 0);
}

BALL_INLINE
Size Substring::size() const
	throw()
{
	if (bound_ == 0)
	{
		return 0;
	}

	return (to_ - from_ + 1);
}

BALL_INLINE 
Substring::operator String() const
	throw(Substring::UnboundSubstring)
{
	if (bound_ == 0)
	{
		throw UnboundSubstring(__FILE__, __LINE__);
	}

  return String(bound_->c_str(), from_, to_ - from_ + 1);
}

BALL_INLINE 
void Substring::unbind()
	throw()
{
  bound_ = 0;
  from_ = to_ = (Index)String::EndPos;
}

BALL_INLINE 
void Substring::destroy()
	throw()
{
	if (bound_ != 0)
	{
	  bound_->erase(from_, to_ - from_ + 1);
	}

  unbind();
}

BALL_INLINE 
void Substring::clear()
	throw()
{
	destroy();
}

BALL_INLINE 
String Substring::toString() const
	throw(Substring::UnboundSubstring)
{
	if (bound_ == 0)
	{
		throw UnboundSubstring(__FILE__, __LINE__);
	}

  return String(bound_->c_str(), from_, to_ - from_ + 1);
}

BALL_INLINE 
Substring& Substring::bind(const String& s, Index from, Size len)
	throw(Exception::IndexUnderflow, Exception::IndexOverflow)
{
	s.validateRange_(from, len);

  bound_ = (String *)&s;
  from_ = from;
  to_ = from + (Index)len - 1;

  return *this;
}

BALL_INLINE 
void Substring::set(const String& s)
	throw(Substring::UnboundSubstring)
{
	if (bound_ == 0)
	{
		throw Substring::UnboundSubstring(__FILE__, __LINE__);
	}

  bound_->replace(from_, to_ - from_ + 1, s);
}

BALL_INLINE 
void Substring::set(const Substring& s)
	throw(Substring::UnboundSubstring)
{
	if (bound_ == 0 || s.bound_ == 0)
	{
		throw Substring::UnboundSubstring(__FILE__, __LINE__);
	}

  bound_->replace(from_, to_ - from_ + 1, s.bound_->c_str() + s.from_, s.size());
}

BALL_INLINE 
const Substring& Substring::operator = (const String& s)
	throw(Substring::UnboundSubstring)
{
  set(s);
  return *this;
}

BALL_INLINE 
const Substring& Substring::operator = (const Substring& s)
	throw(Substring::UnboundSubstring)
{
  set(s);
  return *this;
}

BALL_INLINE 
const Substring& Substring::operator = (const char* char_ptr)
	throw(Substring::UnboundSubstring, Exception::NullPointer)
{
  set(char_ptr);
  return *this;
}

BALL_INLINE 
String* Substring::getBoundString()
	throw()
{
  return bound_;
}

BALL_INLINE 
const String* Substring::getBoundString() const
	throw()
{
  return bound_;
}

BALL_INLINE 
char* Substring::c_str()
	throw(Substring::UnboundSubstring)
{
  if (bound_ == 0)
  {
    throw UnboundSubstring(__FILE__, __LINE__);
	}

  return (char*)&(bound_->c_str()[from_]);
}

BALL_INLINE 
const char* Substring::c_str() const
	throw(Substring::UnboundSubstring)
{
  if (bound_ == 0)
  {
    throw UnboundSubstring(__FILE__, __LINE__);
	}
 
  return &(bound_->c_str()[from_]);
}

BALL_INLINE 
Index Substring::getFirstIndex() const
	throw(Substring::UnboundSubstring)
{
  if (bound_ == 0)
  {
    throw UnboundSubstring(__FILE__, __LINE__);
	}
 
  return from_;
}

BALL_INLINE 
Index Substring::getLastIndex() const
	throw(Substring::UnboundSubstring)
{
  if (bound_ == 0)
  {
    throw UnboundSubstring(__FILE__, __LINE__);
	}
 
  return to_;
}

BALL_INLINE 
char& Substring::operator [] (Index index)
	throw(Substring::UnboundSubstring, Exception::IndexUnderflow, Exception::IndexOverflow)
{
  if (bound_ == 0)
  {
    throw UnboundSubstring(__FILE__, __LINE__);
	}
 
	Size len = String::EndPos;
	validateRange_(index, len);

  return (*bound_)[from_ + index];
}

BALL_INLINE 
char Substring::operator [] (Index index) const
	throw(Substring::UnboundSubstring, Exception::IndexUnderflow, Exception::IndexOverflow)
{
  if (bound_ == 0)
  {
    throw UnboundSubstring(__FILE__, __LINE__);
	}
 
	Size len = String::EndPos;
	validateRange_(index, len);

  return (*bound_)[from_ + index];
}

BALL_INLINE 
bool Substring::isBound() const
	throw()
{
  return (bound_ != 0);
}

BALL_INLINE 
bool Substring::isEmpty() const
	throw()
{
  return (bound_ == 0);
}

BALL_INLINE 
int String::compare(char c, Index from) const
	throw(Exception::IndexUnderflow, Exception::IndexOverflow)
{
	validateIndex_(from);
	return (c_str()[from] - c);
}


BALL_INLINE 
bool Substring::operator == (char c) const
	throw(Substring::UnboundSubstring)
{
  if (bound_ == 0)
  {
    throw UnboundSubstring(__FILE__, __LINE__);
	}
  return (bound_->compare(c, from_, to_ - from_ + 1) == 0);
}

BALL_INLINE 
bool Substring::operator != (char c) const
	throw(Substring::UnboundSubstring)
{
  if (bound_ == 0)
  {
    throw UnboundSubstring(__FILE__, __LINE__);
	}

  return (bound_->compare(c, from_, to_ - from_ + 1) != 0);
}

BALL_INLINE 
bool Substring::isValid() const
	throw()
{
  return (bound_ != 0 && from_ >= 0 && from_ <= to_ && to_ < (Index)bound_->size()) ;
}

BALL_INLINE 
Substring& Substring::toLower()
	throw(Substring::UnboundSubstring)
{
  if (bound_ == 0)
  {
    throw UnboundSubstring(__FILE__, __LINE__);
	}
	(*bound_).toLower(from_, to_ - from_);
  return *this;
}

BALL_INLINE 
Substring& Substring::toUpper()
	throw(Substring::UnboundSubstring)
{
  if (bound_ == 0)
  {
    throw UnboundSubstring(__FILE__, __LINE__);
	}
	(*bound_).toUpper(from_, to_ - from_);
  return *this;
}

BALL_INLINE 
const String& String::operator = (const String& s)
	throw()
{
  set(s);
  return *this;
}

BALL_INLINE 
const String& String::operator = (const char* char_ptr)
	throw(Exception::NullPointer)
{
  set(char_ptr, 0);
  return *this;
}

BALL_INLINE 

#ifdef BALL_HAS_SSTREAM
const String& String::operator = (std::stringstream& s)
#else
const String& String::operator = (std::strstream& s)
#endif
	throw()
{
  set(s);
  return *this;
}

#define BALL_STRING_DEFINE_ASSIGNMENT_METHOD(Type) \
BALL_INLINE \
const String& String::operator = (Type t) throw()\
{ \
  set(t); \
\
  return *this; \
}

BALL_STRING_DEFINE_ASSIGNMENT_METHOD(char)
BALL_STRING_DEFINE_ASSIGNMENT_METHOD(unsigned char)
BALL_STRING_DEFINE_ASSIGNMENT_METHOD(short)
BALL_STRING_DEFINE_ASSIGNMENT_METHOD(unsigned short)
BALL_STRING_DEFINE_ASSIGNMENT_METHOD(int)
BALL_STRING_DEFINE_ASSIGNMENT_METHOD(unsigned int)
BALL_STRING_DEFINE_ASSIGNMENT_METHOD(long)
BALL_STRING_DEFINE_ASSIGNMENT_METHOD(unsigned long)
BALL_STRING_DEFINE_ASSIGNMENT_METHOD(float)
BALL_STRING_DEFINE_ASSIGNMENT_METHOD(double)

#undef BALL_STRING_DEFINE_ASSIGNMENT_METHOD

BALL_INLINE 
void String::setCompareMode(CompareMode mode)
	throw()
{
  compare_mode_ = mode;
}

BALL_INLINE 
String::CompareMode String::getCompareMode()
	throw()
{
  return compare_mode_;
}

BALL_INLINE 
char String::toChar() const
	throw()
{
  return *c_str();
}

BALL_INLINE 
unsigned char String::toUnsignedChar() const
	throw()
{
  return (unsigned char)*c_str();
}

BALL_INLINE 
Substring String::getSubstring(Index from, Size len) const
	throw(Exception::IndexUnderflow, Exception::IndexOverflow)
{
	validateRange_(from, len);
  return Substring(*this, from, len);
}

BALL_INLINE 
Substring String::operator () (Index from, Size len) const
	throw(Exception::IndexUnderflow, Exception::IndexOverflow)
{
  return getSubstring(from, len);
}

BALL_INLINE 
String& String::trim(const char* trimmed)
	throw()
{
  return trimRight(trimmed).trimLeft(trimmed);
}

BALL_INLINE 
String String::trim(const char* trimmed) const
	throw()
{
	String tmp(*this);
	tmp.trimRight(trimmed);
	tmp.trimLeft(trimmed);
  return tmp;
}

BALL_INLINE 
String& String::truncate(Size max_size)
	throw()
{
  if (max_size < (Size) size())
	{
    resize(max_size);
	}

	return *this;
}

BALL_INLINE 
Substring String::left(Size len) const
	throw()
{
	if (len > (Size)size())
	{
		len = (Size)size();
	}

  return Substring(*this, 0, len);
}

BALL_INLINE 
Substring String::instr(const String& patterns, Index from) const
	throw()
{
  string::size_type found = find(patterns, from); 

  return (found == string::npos)
         ? Substring(*this, 0, 0)
         : Substring(*this, (Index)found, (Size)patterns.size());
}

BALL_INLINE 
String String::operator + (const string& s) const
	throw()
{
  String result(*this);
  result.append(s);
  return result;
}

BALL_INLINE 
String String::operator +(const char* char_ptr) const
	throw()
{
  String result(*this);
  result.append(char_ptr);
  return result;
}

BALL_INLINE 
String String::operator + (char c) const
	throw()
{
  String result(*this);
  result.append(1, c);
  return result;
}

BALL_INLINE 
void String::destroy()
	throw()
{
  assign("");
}

BALL_INLINE 
void String::clear()
	throw()
{
  assign("");
}

BALL_INLINE 
bool String::has(char c) const
	throw()
{
  return ((c != (char)0) && (find(c, 0) != string::npos));
}

BALL_INLINE 
bool String::hasSubstring(const String& s, Index from) const
	throw()
{
	if (s.size() == 0)
	{
		return true;
	}

  return (find(s, from) != string::npos);
}

BALL_INLINE 
bool String::isEmpty() const
	throw()
{
  return (size() == 0);
}

BALL_INLINE 
bool String::isAlpha(char c)
	throw()
{
	return ((c != 0) && ((char*)strchr(CHARACTER_CLASS__ASCII_ALPHA, c) != 0));
}

BALL_INLINE 
bool String::isAlnum(char c)
	throw()
{
	return ((c != 0) && ((char*)strchr(CHARACTER_CLASS__ASCII_ALPHANUMERIC, c) != 0));
}

BALL_INLINE 
bool String::isDigit(char c)
	throw()
{
  return ((c != 0) && ((char*)strchr(CHARACTER_CLASS__ASCII_NUMERIC, c) != 0));
}

BALL_INLINE 
bool String::isFloat() const 
	throw()
{
  char* test;
	char* str = const_cast<char*>(c_str());
  errno = 0;
  strtod(str, &test);
	return (errno == 0 && strlen(test) == 0);
}

BALL_INLINE 
bool String::isSpace(char c)
	throw()
{
  return (c == ' ');
}

BALL_INLINE 
bool String::isWhitespace(char c)
	throw()
{
  return ((c != 0) && ((char*)strchr(CHARACTER_CLASS__WHITESPACE, c) != 0));
}

BALL_INLINE 
bool String::operator != (const String& s) const
	throw()
{
  return (compare(s) != 0);
}

BALL_INLINE 
bool String::operator < (const String& s) const
	throw()
{
  return (compare(s) < 0);
}

BALL_INLINE 
bool String::operator <= (const String& s) const
	throw()
{
  return (compare(s) <= 0);
}

BALL_INLINE 
bool String::operator >= (const String& s) const
	throw()
{
  return (compare(s) >= 0);
}

BALL_INLINE 
bool String::operator > (const String& s) const
	throw()
{
  return (compare(s) > 0);
}

BALL_INLINE
bool String::operator == (const String& string) const
	throw()
{
	return (compare(string.c_str()) == 0);
}

BALL_INLINE 
bool String::operator < (const char* char_ptr) const
	throw(Exception::NullPointer)
{
  return (compare(char_ptr) < 0);
}

BALL_INLINE
bool String::operator <= (const char* char_ptr) const
	throw(Exception::NullPointer)
{
  return (compare(char_ptr) <= 0);
}

BALL_INLINE 
bool String::operator >= (const char* char_ptr) const
	throw(Exception::NullPointer)
{
  return (compare(char_ptr) >= 0);
}

BALL_INLINE 
bool String::operator > (const char* char_ptr) const
	throw(Exception::NullPointer)
{
  return (compare(char_ptr) > 0);
}

BALL_INLINE 
bool String::operator == (char c) const
	throw()
{
  return (compare(c) == 0);
}

BALL_INLINE 
bool String::operator != (char c) const
	throw()
{
  return (compare(c) != 0);
}

BALL_INLINE 
bool String::operator < (char c) const
	throw()
{
  return (compare(c) < 0);
}

BALL_INLINE 
bool String::operator <= (char c) const
	throw()
{
  return (compare(c) <= 0);
}

BALL_INLINE 
bool String::operator >= (char c) const
	throw()
{
  return (compare(c) >= 0);
}

BALL_INLINE 
bool String::operator > (char c) const
	throw()
{
  return (compare(c) > 0);
}

BALL_INLINE 
bool String::isValid() const
	throw()
{
  return (c_str() != 0 && size() <= capacity()); 
}

BALL_INLINE 
std::istream& String::getline(std::istream& s,  char delimiter)
	throw()
{
	static char line_buffer[8192];
  s.getline(line_buffer, 8191, delimiter);
	set(line_buffer);
	
	return s;
}

BALL_INLINE 
bool operator != (const String& s, const Substring& substring)
	throw(Substring::UnboundSubstring)
{
	return (substring != s);
}

BALL_INLINE 
bool operator == (const String& s, const Substring& substring)
	throw(Substring::UnboundSubstring)
{
	return (substring == s);
}

BALL_INLINE 
void String::swap(String& s)
	throw()
{
	string::swap(s);
}

BALL_INLINE 
bool operator == (const char* char_ptr, const String &s)
	throw(Exception::NullPointer)
{
	return (s.compare(char_ptr) == 0);
}

BALL_INLINE 
bool operator != (const char* char_ptr, const String &s)
	throw(Exception::NullPointer)
{
	return (s.compare(char_ptr) != 0);
}

BALL_INLINE 
bool operator < (const char* char_ptr, const String& s)
	throw(Exception::NullPointer)
{
	return (s.compare(char_ptr) > 0);
}

BALL_INLINE 
bool operator <= (const char* char_ptr, const String &s)
	throw(Exception::NullPointer)
{
	return (s.compare(char_ptr) >= 0);
}

BALL_INLINE 
bool operator >= (const char* char_ptr, const String& s)
	throw(Exception::NullPointer)
{
	return (s.compare(char_ptr) <= 0);
}

BALL_INLINE 
bool operator > (const char* char_ptr, const String& s)
	throw(Exception::NullPointer)
{
	return (s.compare(char_ptr) < 0);
}

BALL_INLINE 
bool operator == (char c, const String& s)
	throw()
{
	return (s.compare(c) == 0);
}

BALL_INLINE 
bool operator != (char c, const String &s)
	throw()
{
	return (s.compare(c) != 0);
}

BALL_INLINE 
bool operator < (char c, const String& s)
	throw()
{
	return (s.compare(c) > 0);
}

BALL_INLINE 
bool operator <= (char c, const String &s)
	throw()
{
	return (s.compare(c) >= 0);
}

BALL_INLINE 
bool operator >= (char c, const String &s)
	throw()
{
	return (s.compare(c) <= 0);
}

BALL_INLINE 
bool operator > (char c, const String &s)
	throw()
{
	return (s.compare(c) < 0);
}
